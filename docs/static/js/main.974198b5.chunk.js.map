{"version":3,"sources":["componenst/AddCategory.js","helpers/getGifs.js","componenst/GifGridItem.js","componenst/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","categoty","loading","state","setState","useEffect","then","imgs","useFetchGigs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OACI,sBAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBc,SAAAP,GAAC,OAAIF,EAAcE,EAAEQ,OAAOF,a,+BCL7CG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OAFAc,QAAQC,IAAIN,EAAIC,EAAOV,GAGnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCJHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECFX,SAAEsB,GAAe,IAAD,EAEdpC,mBAAS,CAC/BqB,KAAK,GACLgB,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAU,WACN3B,EAASuB,GACJK,MAAM,SAAAC,GACHH,EAAS,CACLlB,KAAKqB,EACLL,SAAS,SAGtB,CAAED,IAEEE,EDb0BK,CAAc7B,GAAjCa,EAFqB,EAE3BN,KAAcgB,EAFa,EAEbA,QAEtB,OACI,qCACA,qBAAIL,UAAU,oCAAd,cAAoDlB,EAApD,OAEEuB,GAAW,mBAAGL,UAAU,mCAAb,sBAEb,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADGA,EAAIC,aEftBmB,EAAe,SAACC,GAAW,IAAD,EAEC7C,mBAAS,CAAC,gBAFX,mBAE5B8C,EAF4B,KAEhB/C,EAFgB,KAInC,OACI,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEO+C,EAAWvB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCZ7BiC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.974198b5.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('')    \n\n    const handleInputChange = e => setInputValue(e.target.value)\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2 ) {\n            setCategories(cats => [ inputValue, ...cats ]);\n            setInputValue('');\n        }\n        \n    }\n    \n    return (        \n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange = {handleInputChange}/>\n        </form>        \n        \n    )\n}\n\nAddCategory.propTypes = {\n     setCategories: PropTypes.func.isRequired,\n}\n","\n\nexport const getGifs = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=zRxNJ6z8L9dRPfOPtJ1faFgpkP7YGgd9`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n    \n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    console.log(id, title, url)\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGigs } from '../hooks/useFetchGifs'\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const { data: images, loading} = useFetchGigs( category );\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>            \n        \n        { loading && <p className=\"animate__animated animate__flash\">Cargando</p>}\n\n        <div className=\"card-grid\">            \n            \n               {images.map( (img) => \n                    <GifGridItem \n                        key = {img.id}\n                        {...img}/>\n               )}                 \n            \n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGigs = ( categoty ) => {\n\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs (categoty)\n            .then( imgs => {                \n                setState({\n                    data:imgs,\n                    loading: false\n                })                \n            });\n    }, [ categoty ])\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './componenst/AddCategory';\nimport { GifGrid } from './componenst/GifGrid';\n\nexport const GifExpertApp = (props) => {\n    \n    const [categories, setCategories] = useState(['Dragon Ball']) ;   \n\n    return (\n        <>\n         <h2>GifExpertApp</h2>   \n         <AddCategory setCategories={setCategories}></AddCategory>\n         <hr/>         \n         <ol>\n            { \n                categories.map(category => (\n                    <GifGrid \n                        key={category}\n                        category={category}\n                    />\n                ))\n             }\n         </ol>\n        </>\n    )\n}\n\nGifExpertApp.propTypes = {\n\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}